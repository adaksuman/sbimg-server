user  openresty;
worker_processes  auto;
worker_rlimit_nofile 300000;
pcre_jit on;

error_log  /opt/openresty/log/error.log info;

pid        /opt/openresty/run/nginx.pid;

events {
    worker_connections 8192;
    use epoll;
    multi_accept on;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    lua_package_path '/opt/openresty/etc/lua/?.lua;;/opt/openresty/nginx/lua/?.lua;;';

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$http_x_sbimg_host" '
                      '"$http_x_forwarded_proto" "$http_cf_connecting_ip"';

    access_log  /opt/openresty/log/access.log  main;

    #Map to allow/deny different file extensions
    map $origin_ext $allowed_origin_ext {
        default  0;

        ~*^jpg$   1;
        ~*^png$   1;
        ~*^gif$   1;
        ~*^jpeg$  1;
        ~*^webp$  1;
    }

    #Control expiration based on mime type
    map $sent_http_content_type $cache_expires {
        default         2h;

        ~image/         "16d";
    }

    #Server wide optimizations
    include common_config.conf;
    #/Server wide optimizations

    # Include user config variables
    include variables.conf;

    #Proxy config
    #Place file-cache on tmpfs for speed, we do not care if it is lost
    proxy_cache_path /dev/shm/nginx-cache-sbimg levels=1:2 keys_zone=SBIMG:100m inactive=24h;
    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_cache_use_stale updating error timeout invalid_header http_500; #Use stale cache if upstream is in troubles
    proxy_cache_lock on; #Prevent pile-up effect and control inflow of traffic to upstream
    proxy_cache_lock_age 5s;
    proxy_cache_lock_timeout 3s;
    proxy_ignore_headers X-Accel-Expires Cache-Control Expires Set-Cookie; #Cache regardless of downstream controls
    upstream sbimg_backend {
        server 127.0.0.1:8080;
        #See http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive
        keepalive 32;
    }
    #/Proxy config

    #Lua init
    #Shared dictionaries
    lua_shared_dict imgsrv_locks 10m; #Shared memory segment for locking mechanism
    lua_shared_dict imgsrv_cache 50m; #Set according to your load #Shared memory to cache look-ups

    #Initialize all of the modules that we will use regularly
    init_by_lua '
        url        = require("net.url")
        sbimg      = require("sbimg")
        cjson      = require("cjson")
        cjson_safe = require("cjson.safe")
    ';

    server {
        #Reverse proxy that will front/cache/serve all of the requests
        # See http://nginx.org/en/docs/http/ngx_http_core_module.html#listen for explanation
        listen       0.0.0.0:80 default_server backlog=1024 rcvbuf=32768 sndbuf=131072;
       #listen       [::]:80    default_server backlog=1024 rcvbuf=32768 sndbuf=131072; #Uncomment if IPv6 is an option
        server_name  _; #This will ensure that all requests to any hostname will come here, unless other virtual servers configured
       #include cf.conf; #Uncomment if you front this server with CloudFlare
        access_log  /opt/openresty/log/${sbimg_host}-access.log  main;

        location = / {
            #If someone requests plain servername with no path, route to downstream
            proxy_intercept_errors  on;
            proxy_http_version 1.1;
            proxy_cache off;
            proxy_pass http://localhost:8080;
        }

        location ~* \.(jpg|jpeg|png|gif|webp)$ {
            #Main location that accepts all of the incomming requests for images
            #We also have nginx map to control what extensions are processed

            proxy_intercept_errors  on;
            proxy_http_version 1.1;
            proxy_cache_lock on;
            proxy_cache_lock_age 3s;
            proxy_cache_lock_timeout 3s;
            proxy_cache_methods GET HEAD;
            proxy_cache_revalidate on;

            proxy_cache SBIMG;
            proxy_cache_valid 200       4h; #Cache successful requests for 4 hours
            proxy_cache_valid 404       20s;
            add_header X-Proxy-Cache    $upstream_cache_status;
            add_header X-Request-Time   $request_time;
            add_header Cache-Control    "public, max-age=1382400, s-maxage=43200";
            etag                        on;
            expires                     16d;

            proxy_pass http://sbimg_backend;
        }
    }

    server {
        #(Default) Frontend server to serve transformed images
        listen          localhost:8080;
        listen          [::1]:8080;
        server_name     localhost;

        access_log  /opt/openresty/log/${sbimg_host}-backend-access.log  main; #Probably just extra log that will be mostly duplicate of the upstream

        #Global variables
        #Shared dict info
        set $sd_default_expire    86400; #Set default shared dict cache expire to 24h
        set_md5 $sd_cache_key     $request_uri; #Prepare cache key for lookup/storage

        #Path info
        set $processed_path       ''; #Predefine processed image local path for setting by Lua later

        #Setting
        set $min_width   32;
        set $min_height  32;
        set $max_width   2500;
        set $max_height  2500;
        set $min_quality 50;

        #Default args
        set $width          0;    #Default to no resizing
        set $height         0;    #Deafult to no resizing
        set $crop           0;    #No cropping by default
        set $zoom           0;    #No zooming by default
        set $strip          1;    #Strip all the info by default
        set $quality        75;   #Set quality to 75 by default, can reduce to 65~70 for better compression but with less details
        set $create_webp    0;    #Do not create WEBP files by default

        #Default catch-all location
        location / {
            return 302 "${sbimg_homepage}";
        }

        location = /empty.gif {
            #Empty GIF to serve on errors if needed
            internal;
            expires -1;
            empty_gif;
        }

        location ~* "^/(?<origin_host>[^/]+)(?<origin_path>/.*\.(?<origin_ext>[0-9a-z]+))$" {
            #Perform verification
            #I could have done most of it with If statements in nginx
            #but since http://wiki.nginx.org/IfIsEvil and need for more safistication
            #access_by_lua will be better
            access_by_lua_file 'lua/sbimg_access.lua';

            #Route the request and set/cache CTX if not cached
            rewrite_by_lua_file 'lua/sbimg_main_rewrite.lua';

            #Set headers for files
            etag on;
            expires    $cache_expires;
            add_header Cache-Control    "public";

            alias /opt/openresty/cache/${sbimg_host}/;
            try_files $processed_path @process;
            error_page 403 =200 /empty.gif; #If someone tries to do something forbidden, give them empty GIF
        }

        location @process {
            if ( $request_method != "GET" ) {
                #If image is not processed, do not allow unless it is being GETed
                return 405;
            }

            root /opt/openresty/cache/${sbimg_host}/;
            content_by_lua '
                local exec           = ngx.exec
                local exit           = ngx.exit
                local OK             = ngx.OK
                local HTTP_NOT_FOUND = ngx.HTTP_NOT_FOUND
                local sbimg          = sbimg
                local request_uri    = ngx.var.request_uri
                local cjson          = cjson_safe.new()

                -- Shared dictionary
                local imgsrv_cache = ngx.shared.imgsrv_cache

                -- Check if ctx is in cache, if not, rerun the request
                local sd_cache_key = ngx.var.sd_cache_key
                local jctx, flags  = imgsrv_cache:get(sd_cache_key)
                local ctx          = cjson.decode(jctx)
                if not ctx then
                    exec(request_uri)
                end

                -- Lets check if origin exists or fetchable
                local ok = sbimg.get_origin(ctx)
                if ok then
                    -- Perform requested transformation, cache, and rerun the request
                    local ok = sbimg.transform_image(ctx)
                    if not ok then
                        -- Should not happen but who knows
                        exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                    end
                    exec(request_uri)
                    exit(OK)
                end
                -- If no errors we should not reach here
                exit(HTTP_NOT_FOUND)
            ';
            error_page 404 =200 /empty.gif;
        }
    }
}